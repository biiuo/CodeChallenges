// ===================================================
// GENERADOR Y FUENTE DE DATOS
// ===================================================

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===================================================
// ENUMERACIONES: Roles, Estados, Dificultades
// ===================================================

enum Role {
  STUDENT     // Estudiante (puede ver retos y enviar soluciones)
  PROFESSOR   // Profesor (puede crear cursos y retos)
  ADMIN       // Administrador (gestiona todo el sistema)
}

enum ChallengeStatus {
  DRAFT       // Borrador (no visible aún)
  PUBLISHED   // Publicado (visible para estudiantes)
  ARCHIVED    // Archivado (no editable)
}

enum SubmissionStatus {
  QUEUED               // En espera de ejecución
  RUNNING              // Ejecutándose
  ACCEPTED             // Todos los casos correctos
  WRONG_ANSWER         // Salida incorrecta
  TIME_LIMIT_EXCEEDED  // Superó el tiempo límite
  RUNTIME_ERROR        // Error en ejecución
  COMPILATION_ERROR    // Error de compilación
}

enum Difficulty {
  EASY 
  MEDIUM
  HARD
}

// ===================================================
// MODELOS PRINCIPALES
// ===================================================

/// Tabla de usuarios del sistema.
/// Se puede buscar tanto por `username` como por `codigo` (ambos únicos).
model User {
  id        String   @id @default(uuid())           // PK
  codigo    String   @unique                        // Código institucional o identificador interno
  username  String   @unique                        // Nombre de usuario único
  email     String   @unique                        // Correo único
  password  String                                  // Contraseña cifrada
  name      String                                  // Nombre del usuario
  role      Role     @default(STUDENT)              // Rol del usuario
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones:
  courses            Course[]        @relation("CourseProfessor")
  courseEnrollments  CourseStudent[]                             
  submissions        Submission[]
  authoredChallenges Challenge[]                   
}

// ===================================================

/// Representa un curso o grupo académico.
/// Un curso tiene un código, un nombre, un periodo y un grupo.
model Course {
  id        String   @id @default(uuid())           // PK
  code      String   @unique                        // Código único del curso (ej: NRC o identificador)
  name      String                                  // Nombre del curso
  period    String                                  // Ej: "2025-1"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones:
  professors  User[]           @relation("CourseProfessor") // Profesores asignados (N:M)
  students    CourseStudent[]                               // Estudiantes inscritos (N:M)
  challenges  Challenge[]                                   // Retos asociados al curso (1:N)
  evaluations Evaluation[]                                  // Relación con evaluaciones
  submissions Submission[]
}

// ===================================================

/// Relación N:M entre usuarios y cursos (como estudiantes)
model CourseStudent {
  userId     String                                 // FK → User.id
  courseId   String                                 // FK → Course.id
  enrolledAt DateTime @default(now())               // Fecha de inscripción

  // Relaciones:
  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@id([userId, courseId]) // PK compuesta
}

// ===================================================

/// Reto algorítmico asociado a un curso.
/// Incluye su dificultad, límites y estado (borrador, publicado o archivado).
model Challenge {
  id          String          @id @default(cuid())
  title       String
  description String
  difficulty  Difficulty      @default(EASY)                           
  tags        String[]                             // Etiquetas temáticas (ej: ["arrays", "dp"])
  timeLimit   Int                                  // Tiempo límite en milisegundos
  memoryLimit Int                                  // Límite de memoria (MB)
  status      ChallengeStatus @default(DRAFT)
  isPublic    Boolean         @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relaciones:
  authorId    String
  author      User          @relation(fields: [authorId], references: [id])
  courses     Course[]      @relation("CourseChallenges")
  testcases   Testcase[]    
  submissions Submission[]
  evaluationChallenges EvaluationChallenge[]
}

// ===================================================

/// Caso de prueba de un reto (input y output esperados).
/// Algunos casos pueden ser ocultos (visible = false) para los estudiantes.
model Testcase {
  challengeId String                                  // FK → Challenge.id
  caseNumber  Int                                     // Secuencia dentro de cada problema
  input       String                                  // Datos de entrada
  output      String                                  // Salida
  visible     Boolean   @default(false)               // Indica si el caso es visible

  challenge   Challenge @relation(fields: [challengeId], references: [id])
  createdAt   DateTime  @default(now())

  @@id([challengeId, caseNumber])
}

// ===================================================

/// Envío (submission) de un estudiante para un reto.
/// Guarda el código, lenguaje, estado y puntaje final.
model Submission {
  id               Int                @id @default(autoincrement())
  submissionNumber Int
  language         String
  code             String
  status           SubmissionStatus   @default(QUEUED)
  score            Int?
  timeMsTotal      Int?
  createdAt        DateTime           @default(now())

  // Campos de contexto
  userId          String
  challengeId     String
  courseId        String?
  evaluationId    Int?

  // Relaciones:
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge       Challenge     @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  course          Course?       @relation(fields: [courseId], references: [id], onDelete: SetNull)
  evaluation      Evaluation?   @relation(fields: [evaluationId], references: [id], onDelete: SetNull)

  @@unique([userId, challengeId, courseId, evaluationId, submissionNumber])
}

// ===================================================

model Evaluation {
  id                Int      @id @default(autoincrement())
  evaluationNumber  Int
  name              String
  description       String
  date              DateTime
  maxDuration       Int
  createdAt         DateTime @default(now())

  // Relaciones:
  courseId    String
  course      Course @relation(fields: [courseId], references: [id])
  challenges  EvaluationChallenge[]
  submissions Submission[]

  @@unique([courseId, evaluationNumber])
}

model EvaluationChallenge {
  evaluationId Int
  challengeId  String

  evaluation Evaluation @relation(fields: [evaluationId], references: [id])
  challenge  Challenge  @relation(fields: [challengeId], references: [id])

  @@unique([evaluationId, challengeId])
}